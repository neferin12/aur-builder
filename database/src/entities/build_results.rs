//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "build_results")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub package_id: i64,
    pub exit_code: i32,
    #[sea_orm(column_type = "Text", nullable)]
    pub build_log: Option<String>,
    pub success: bool,
    pub finished_at: Option<DateTime>,
    pub started_at: Option<DateTime>,
    pub version: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::package_metadata::Entity",
        from = "Column::PackageId",
        to = "super::package_metadata::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    PackageMetadata,
}

impl Related<super::package_metadata::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PackageMetadata.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
